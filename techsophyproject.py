# -*- coding: utf-8 -*-
"""techsophyProject.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1kkCS9ZIF0Zi1iHxluazCaCQpSrznO8Ue
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

import warnings
warnings.filterwarnings('ignore')

df = pd.read_csv('/content/Techsophy.csv')

df

df.head()

df.tail()

df.shape

df.columns

df.isnull().sum()

df.describe()

df.nunique()

df.duplicated().sum()

df['PatientId'].duplicated().sum()

df



df.dropna(inplace=True)

df.drop_duplicates(subset=['PatientId'], keep='first', inplace=True)

Q1 = df['Age'].quantile(0.25)
Q3 = df['Age'].quantile(0.75)
IQR = Q3 - Q1

lower_bound = Q1 - 1.5 * IQR
upper_bound = Q3 + 1.5 * IQR

df = df[(df['Age'] >= lower_bound) & (df['Age'] <= upper_bound)]

print("Shape of the DataFrame after removing outliers:", df.shape)
display(df.head())

print("Shape of the DataFrame after cleaning:", df.shape)

plt.figure(figsize=(15, 10))

plt.subplot(3, 3, 1)
sns.countplot(x='Gender', data=df)
plt.title('Distribution of Gender')

plt.subplot(3, 3, 2)
sns.histplot(df['Age'], bins=20, kde=True)
plt.title('Distribution of Age')

plt.subplot(3, 3, 3)
sns.countplot(x='Scholarship', data=df)
plt.title('Distribution of Scholarship')

plt.subplot(3, 3, 4)
sns.countplot(x='Hipertension', data=df)
plt.title('Distribution of Hipertension')

plt.subplot(3, 3, 5)
sns.countplot(x='Diabetes', data=df)
plt.title('Distribution of Diabetes')

plt.subplot(3, 3, 6)
sns.countplot(x='Alcoholism', data=df)
plt.title('Distribution of Alcoholism')

plt.subplot(3, 3, 7)
sns.countplot(x='SMS_received', data=df)
plt.title('Distribution of SMS_received')

plt.subplot(3, 3, 8)
sns.countplot(x='No-show', data=df)
plt.title('Distribution of No-show')

plt.tight_layout()
plt.show()

plt.figure(figsize=(20, 15))

plt.subplot(3, 3, 1)
sns.countplot(x='Gender', hue='No-show', data=df)
plt.title('No-show by Gender')

plt.subplot(3, 3, 2)
sns.countplot(x='Scholarship', hue='No-show', data=df)
plt.title('No-show by Scholarship')

plt.subplot(3, 3, 3)
sns.countplot(x='Hipertension', hue='No-show', data=df)
plt.title('No-show by Hipertension')

plt.subplot(3, 3, 4)
sns.countplot(x='Diabetes', hue='No-show', data=df)
plt.title('No-show by Diabetes')

plt.subplot(3, 3, 5)
sns.countplot(x='Alcoholism', hue='No-show', data=df)
plt.title('No-show by Alcoholism')

plt.subplot(3, 3, 6)
sns.countplot(x='Handcap', hue='No-show', data=df)
plt.title('No-show by Handcap')

plt.subplot(3, 3, 7)
sns.countplot(x='SMS_received', hue='No-show', data=df)
plt.title('No-show by SMS_received')

plt.tight_layout()
plt.show()

df['ScheduledDay'] = pd.to_datetime(df['ScheduledDay']).dt.tz_convert(None)
df['AppointmentDay'] = pd.to_datetime(df['AppointmentDay']).dt.tz_convert(None)

df['ScheduledDayOfWeek'] = df['ScheduledDay'].dt.day_name()
df['AppointmentDayOfWeek'] = df['AppointmentDay'].dt.day_name()
df['ScheduledMonth'] = df['ScheduledDay'].dt.month_name()
df['AppointmentMonth'] = df['AppointmentDay'].dt.month_name()

plt.figure(figsize=(18, 12))

plt.subplot(2, 2, 1)
sns.countplot(x='ScheduledDayOfWeek', hue='No-show', data=df, order=df['ScheduledDayOfWeek'].value_counts().index)
plt.title('No-show by Scheduled Day of Week')
plt.xticks(rotation=45, ha='right')

plt.subplot(2, 2, 2)
sns.countplot(x='AppointmentDayOfWeek', hue='No-show', data=df, order=df['AppointmentDayOfWeek'].value_counts().index)
plt.title('No-show by Appointment Day of Week')
plt.xticks(rotation=45, ha='right')

plt.subplot(2, 2, 3)
sns.countplot(x='ScheduledMonth', hue='No-show', data=df, order=df['ScheduledMonth'].value_counts().index)
plt.title('No-show by Scheduled Month')
plt.xticks(rotation=45, ha='right')

plt.subplot(2, 2, 4)
sns.countplot(x='AppointmentMonth', hue='No-show', data=df, order=df['AppointmentMonth'].value_counts().index)
plt.title('No-show by Appointment Month')
plt.xticks(rotation=45, ha='right')

plt.tight_layout()
plt.show()

df['LeadTime'] = (df['AppointmentDay'] - df['ScheduledDay']).dt.days

plt.figure(figsize=(12, 6))
sns.histplot(df['LeadTime'], bins=30, kde=True)
plt.title('Distribution of Lead Time')
plt.xlabel('Lead Time (days)')
plt.ylabel('Frequency')
plt.show()

plt.figure(figsize=(8, 6))
sns.boxplot(x='No-show', y='LeadTime', data=df)
plt.title('Lead Time vs. No-show')
plt.xlabel('No-show')
plt.ylabel('Lead Time (days)')
plt.show()

df['No-show_numeric'] = df['No-show'].apply(lambda x: 1 if x == 'Yes' else 0)

numerical_cols = ['Age', 'LeadTime', 'Scholarship', 'Hipertension', 'Diabetes', 'Alcoholism', 'Handcap', 'SMS_received', 'No-show_numeric']
correlation_matrix = df[numerical_cols].corr()

plt.figure(figsize=(10, 8))
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', fmt=".2f")
plt.title('Correlation Matrix of Numerical Features and No-show')
plt.show()

df['No-show_numeric'] = df['No-show'].apply(lambda x: 1 if x == 'Yes' else 0)

X = df.drop(['No-show', 'No-show_numeric'], axis=1)
y = df['No-show_numeric']


from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42, stratify=y)

"""**Reasoning**:
Initialize and store the baseline and advanced classification models as instructed.


"""

from sklearn.linear_model import LogisticRegression
from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import RandomForestClassifier
from xgboost import XGBClassifier

models = {
    'LogisticRegression': LogisticRegression(solver='liblinear', random_state=42),
    'DecisionTree': DecisionTreeClassifier(random_state=42),
    'RandomForest': RandomForestClassifier(random_state=42),
    'XGBoost': XGBClassifier(random_state=42, use_label_encoder=False, eval_metric='logloss')
}

"""**Reasoning**:
Apply SMOTE to the training data to handle class imbalance.


"""

from imblearn.over_sampling import SMOTE

smote = SMOTE(random_state=42)
X_train_numeric = X_train.select_dtypes(include=np.number)
X_train_resampled, y_train_resampled = smote.fit_resample(X_train_numeric, y_train)

X_train_numeric = X_train.select_dtypes(include=np.number)
X_train_resampled, y_train_resampled = smote.fit_resample(X_train_numeric, y_train)

print("Shape of X_train after SMOTE:", X_train_resampled.shape)
print("Shape of y_train after SMOTE:", y_train_resampled.shape)
print("\nClass distribution in y_train after SMOTE:")
print(y_train_resampled.value_counts())

from sklearn.metrics import f1_score, roc_auc_score, confusion_matrix

X_test_numeric = X_test.select_dtypes(include=np.number)

for name, model in models.items():
    model.fit(X_train_resampled, y_train_resampled)
    y_pred = model.predict(X_test_numeric)
    y_pred_proba = model.predict_proba(X_test_numeric)[:, 1]

    f1 = f1_score(y_test, y_pred)
    roc_auc = roc_auc_score(y_test, y_pred_proba)
    cm = confusion_matrix(y_test, y_pred)

    print(f"--- {name} ---")
    print(f"F1-score: {f1:.4f}")
    print(f"ROC-AUC: {roc_auc:.4f}")
    print("Confusion Matrix:")
    print(cm)
    print("-" * (len(name) + 6))

best_model = models['RandomForest']

print("Best performing model selected:")
print(best_model)

X_numeric_original = df.select_dtypes(include=np.number).drop(['No-show_numeric', 'risk_score'], axis=1, errors='ignore')
df['risk_score'] = best_model.predict_proba(X_numeric_original)[:, 1]

high_risk_threshold = 0.7
medium_risk_threshold = 0.4

conditions = [
    (df['risk_score'] >= high_risk_threshold),
    (df['risk_score'] >= medium_risk_threshold) & (df['risk_score'] < high_risk_threshold),
    (df['risk_score'] < medium_risk_threshold)
]
choices = ['High', 'Medium', 'Low']
df['risk_level'] = np.select(conditions, choices, default='Low')

action_conditions = [
    (df['risk_level'] == 'High'),
    (df['risk_level'] == 'Medium'),
    (df['risk_level'] == 'Low')
]
action_choices = ['Call/Reschedule', 'Extra SMS Reminder', 'Standard Reminder']
df['suggested_action'] = np.select(action_conditions, action_choices, default='Standard Reminder')

display(df[['AppointmentID', 'risk_score', 'risk_level', 'suggested_action']].head())
display(df[['AppointmentID', 'risk_score', 'risk_level', 'suggested_action']].tail())

feature_importances = pd.Series(best_model.feature_importances_, index=X_train_numeric.columns)

sorted_feature_importances = feature_importances.sort_values(ascending=False)

print("## Feature Importances from the Best Model (Random Forest)\n")
print(sorted_feature_importances)

print("\n## Best Model Summary")
print(best_model)

print("\n## Appointment Risk Levels and Suggested Actions")
display(df[['AppointmentID', 'risk_level', 'suggested_action']])



import pkg_resources
import sys

packages = [
    'numpy',
    'pandas',
    'matplotlib',
    'seaborn',
    'sklearn',
    'xgboost',
    'imblearn'
]

print("Package Versions:")
for package in packages:
    try:
        version = pkg_resources.get_distribution(package).version
        print(f"{package}=={version}")
    except pkg_resources.DistributionNotFound:
        print(f"{package} is not installed in this environment.")